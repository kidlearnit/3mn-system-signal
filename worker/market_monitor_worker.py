#!/usr/bin/env python3
"""
Market Monitor Worker - Worker ƒë·ªÉ ch·∫°y Market Signal Monitor
T·ª± ƒë·ªông monitor th·ªã tr∆∞·ªùng v√† g·ª≠i t√≠n hi·ªáu t·ª´ng m√£ ri√™ng l·∫ª
"""

import sys
import os
import asyncio
import logging
from datetime import datetime, time
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.market_signal_monitor import market_signal_monitor

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/market_monitor_worker.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class MarketMonitorWorker:
    """Worker ƒë·ªÉ ch·∫°y Market Signal Monitor theo l·ªãch"""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.monitor = market_signal_monitor
        
        # C·∫•u h√¨nh l·ªãch cho t·ª´ng th·ªã tr∆∞·ªùng
        self.market_schedules = {
            'VN': {
                'timezone': 'Asia/Ho_Chi_Minh',
                'morning_jobs': [
                    {'hour': 9, 'minute': 5},   # 9:05 AM
                    {'hour': 9, 'minute': 35},  # 9:35 AM
                    {'hour': 10, 'minute': 5},  # 10:05 AM
                    {'hour': 10, 'minute': 35}, # 10:35 AM
                    {'hour': 11, 'minute': 5},  # 11:05 AM
                ],
                'afternoon_jobs': [
                    {'hour': 13, 'minute': 5},  # 1:05 PM
                    {'hour': 13, 'minute': 35}, # 1:35 PM
                    {'hour': 14, 'minute': 5},  # 2:05 PM
                    {'hour': 14, 'minute': 35}, # 2:35 PM
                ]
            },
            'US': {
                'timezone': 'America/New_York',
                'jobs': [
                    {'hour': 9, 'minute': 35},  # 9:35 AM
                    {'hour': 10, 'minute': 5},  # 10:05 AM
                    {'hour': 10, 'minute': 35}, # 10:35 AM
                    {'hour': 11, 'minute': 5},  # 11:05 AM
                    {'hour': 11, 'minute': 35}, # 11:35 AM
                    {'hour': 12, 'minute': 5},  # 12:05 PM
                    {'hour': 12, 'minute': 35}, # 12:35 PM
                    {'hour': 13, 'minute': 5},  # 1:05 PM
                    {'hour': 13, 'minute': 35}, # 1:35 PM
                    {'hour': 14, 'minute': 5},  # 2:05 PM
                    {'hour': 14, 'minute': 35}, # 2:35 PM
                    {'hour': 15, 'minute': 5},  # 3:05 PM
                ]
            }
        }
    
    def setup_scheduler(self):
        """Thi·∫øt l·∫≠p l·ªãch cho scheduler"""
        try:
            logger.info("üìÖ Setting up market monitoring schedules...")
            
            # L·ªãch cho th·ªã tr∆∞·ªùng VN
            vn_schedule = self.market_schedules['VN']
            
            # Phi√™n s√°ng VN (9:05 - 11:05)
            for job_config in vn_schedule['morning_jobs']:
                self.scheduler.add_job(
                    self.run_vn_monitoring,
                    CronTrigger(
                        hour=job_config['hour'],
                        minute=job_config['minute'],
                        timezone=vn_schedule['timezone']
                    ),
                    id=f"vn_morning_{job_config['hour']}_{job_config['minute']}",
                    name=f"VN Morning Monitoring {job_config['hour']}:{job_config['minute']:02d}"
                )
            
            # Phi√™n chi·ªÅu VN (13:05 - 14:35)
            for job_config in vn_schedule['afternoon_jobs']:
                self.scheduler.add_job(
                    self.run_vn_monitoring,
                    CronTrigger(
                        hour=job_config['hour'],
                        minute=job_config['minute'],
                        timezone=vn_schedule['timezone']
                    ),
                    id=f"vn_afternoon_{job_config['hour']}_{job_config['minute']}",
                    name=f"VN Afternoon Monitoring {job_config['hour']}:{job_config['minute']:02d}"
                )
            
            # L·ªãch cho th·ªã tr∆∞·ªùng US
            us_schedule = self.market_schedules['US']
            
            for job_config in us_schedule['jobs']:
                self.scheduler.add_job(
                    self.run_us_monitoring,
                    CronTrigger(
                        hour=job_config['hour'],
                        minute=job_config['minute'],
                        timezone=us_schedule['timezone']
                    ),
                    id=f"us_{job_config['hour']}_{job_config['minute']}",
                    name=f"US Monitoring {job_config['hour']}:{job_config['minute']:02d}"
                )
            
            logger.info(f"‚úÖ Scheduled {len(self.scheduler.get_jobs())} monitoring jobs")
            
            # Log t·∫•t c·∫£ jobs ƒë√£ ƒë∆∞·ª£c schedule
            for job in self.scheduler.get_jobs():
                next_run = job.next_run_time if hasattr(job, 'next_run_time') else 'Unknown'
                logger.info(f"   üìã {job.name}: {next_run}")
            
        except Exception as e:
            logger.error(f"‚ùå Error setting up scheduler: {e}")
            raise
    
    async def run_vn_monitoring(self):
        """Ch·∫°y monitoring cho th·ªã tr∆∞·ªùng VN"""
        try:
            logger.info("üáªüá≥ Starting VN market monitoring...")
            await self.monitor.monitor_market_signals('VN')
            logger.info("‚úÖ VN market monitoring completed")
        except Exception as e:
            logger.error(f"‚ùå Error in VN monitoring: {e}")
    
    async def run_us_monitoring(self):
        """Ch·∫°y monitoring cho th·ªã tr∆∞·ªùng US"""
        try:
            logger.info("üá∫üá∏ Starting US market monitoring...")
            await self.monitor.monitor_market_signals('US')
            logger.info("‚úÖ US market monitoring completed")
        except Exception as e:
            logger.error(f"‚ùå Error in US monitoring: {e}")
    
    async def run_manual_monitoring(self, market: str):
        """Ch·∫°y monitoring th·ªß c√¥ng"""
        try:
            logger.info(f"üîß Manual monitoring for {market} market...")
            await self.monitor.monitor_market_signals(market)
            logger.info(f"‚úÖ Manual monitoring for {market} completed")
        except Exception as e:
            logger.error(f"‚ùå Error in manual monitoring for {market}: {e}")
    
    def start(self):
        """B·∫Øt ƒë·∫ßu worker"""
        try:
            logger.info("üöÄ Starting Market Monitor Worker...")
            
            # Thi·∫øt l·∫≠p scheduler
            self.setup_scheduler()
            
            # B·∫Øt ƒë·∫ßu scheduler
            self.scheduler.start()
            
            logger.info("‚úÖ Market Monitor Worker started successfully")
            logger.info(f"üìä Monitoring {len(self.scheduler.get_jobs())} scheduled jobs")
            
        except Exception as e:
            logger.error(f"‚ùå Error starting Market Monitor Worker: {e}")
            raise
    
    def stop(self):
        """D·ª´ng worker"""
        try:
            logger.info("üõë Stopping Market Monitor Worker...")
            
            if self.scheduler.running:
                self.scheduler.shutdown()
            
            logger.info("‚úÖ Market Monitor Worker stopped")
            
        except Exception as e:
            logger.error(f"‚ùå Error stopping Market Monitor Worker: {e}")
    
    def get_status(self):
        """L·∫•y tr·∫°ng th√°i worker"""
        try:
            status = {
                'running': self.scheduler.running,
                'jobs_count': len(self.scheduler.get_jobs()),
                'next_jobs': []
            }
            
            # L·∫•y 5 jobs ti·∫øp theo
            jobs = self.scheduler.get_jobs()
            for job in jobs[:5]:
                next_run = getattr(job, 'next_run_time', None)
                status['next_jobs'].append({
                    'name': job.name,
                    'next_run': next_run.isoformat() if next_run else None
                })
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå Error getting worker status: {e}")
            return {'error': str(e)}

async def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y worker"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Market Monitor Worker')
    parser.add_argument('--market', choices=['VN', 'US'], 
                       help='Run manual monitoring for specific market')
    parser.add_argument('--status', action='store_true', 
                       help='Show worker status')
    
    args = parser.parse_args()
    
    # T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a c√≥
    os.makedirs('logs', exist_ok=True)
    
    worker = MarketMonitorWorker()
    
    try:
        if args.status:
            # Hi·ªÉn th·ªã tr·∫°ng th√°i
            status = worker.get_status()
            print("üìä Market Monitor Worker Status:")
            print(f"   Running: {status.get('running', False)}")
            print(f"   Jobs Count: {status.get('jobs_count', 0)}")
            print("   Next Jobs:")
            for job in status.get('next_jobs', []):
                print(f"      - {job['name']}: {job['next_run']}")
        
        elif args.market:
            # Ch·∫°y monitoring th·ªß c√¥ng
            await worker.run_manual_monitoring(args.market)
        
        else:
            # Ch·∫°y worker v·ªõi scheduler
            worker.start()
            
            logger.info("üéØ Market Monitor Worker is running...")
            logger.info("Press Ctrl+C to stop")
            
            # Gi·ªØ worker ch·∫°y
            try:
                while True:
                    await asyncio.sleep(60)  # Check every minute
            except KeyboardInterrupt:
                logger.info("üõë Received interrupt signal")
    
    except Exception as e:
        logger.error(f"‚ùå Error in main: {e}")
    finally:
        worker.stop()

if __name__ == "__main__":
    asyncio.run(main())
