#!/usr/bin/env python3
"""
Market Signal Monitor - S·ª≠ d·ª•ng Hybrid Signal Engine ƒë·ªÉ monitor th·ªã tr∆∞·ªùng
G·ª≠i t√≠n hi·ªáu t·ª´ng m√£ ri√™ng l·∫ª v√†o Telegram khi th·ªã tr∆∞·ªùng m·ªü c·ª≠a
"""

import logging
import asyncio
from datetime import datetime, time
from typing import Dict, List, Optional, Any
import pytz
from sqlalchemy import text

from .hybrid_signal_engine import hybrid_signal_engine
from .sma_telegram_service import SMATelegramService
from ..db import init_db
import os

logger = logging.getLogger(__name__)

class MarketSignalMonitor:
    """Monitor t√≠n hi·ªáu th·ªã tr∆∞·ªùng v√† g·ª≠i t·ª´ng m√£ ri√™ng l·∫ª"""
    
    def __init__(self):
        # Initialize database
        database_url = os.getenv('DATABASE_URL')
        if database_url:
            init_db(database_url)
            # Import SessionLocal after init_db
            from ..db import SessionLocal
            self.SessionLocal = SessionLocal
        
        self.hybrid_engine = hybrid_signal_engine
        self.telegram_service = SMATelegramService()
        # Load config from environment
        self.tg_token = os.getenv('TG_TOKEN')
        self.tg_chat_id = os.getenv('TG_CHAT_ID')
        
        # C·∫•u h√¨nh th·ªùi gian th·ªã tr∆∞·ªùng
        self.market_schedules = {
            'VN': {
                'timezone': 'Asia/Ho_Chi_Minh',
                'morning_open': time(9, 0),   # 9:00 AM
                'morning_close': time(11, 30), # 11:30 AM
                'afternoon_open': time(13, 0), # 1:00 PM
                'afternoon_close': time(15, 0), # 3:00 PM
                'weekdays': [0, 1, 2, 3, 4]  # Monday to Friday
            },
            'US': {
                'timezone': 'America/New_York',
                'open': time(9, 30),   # 9:30 AM
                'close': time(16, 0),  # 4:00 PM
                'weekdays': [0, 1, 2, 3, 4]  # Monday to Friday
            }
        }
        
        # Cache ƒë·ªÉ tr√°nh g·ª≠i t√≠n hi·ªáu tr√πng l·∫∑p
        self.signal_cache = {}
        self.last_signal_time = {}
        
    def is_market_open(self, market: str) -> bool:
        """Ki·ªÉm tra th·ªã tr∆∞·ªùng c√≥ ƒëang m·ªü c·ª≠a kh√¥ng"""
        try:
            market_config = self.market_schedules.get(market)
            if not market_config:
                return False
            
            # L·∫•y th·ªùi gian hi·ªán t·∫°i theo timezone c·ªßa th·ªã tr∆∞·ªùng
            tz = pytz.timezone(market_config['timezone'])
            now = datetime.now(tz)
            current_time = now.time()
            current_weekday = now.weekday()
            
            # Ki·ªÉm tra ng√†y trong tu·∫ßn
            if current_weekday not in market_config['weekdays']:
                return False
            
            # Ki·ªÉm tra th·ªùi gian m·ªü c·ª≠a
            if market == 'VN':
                # Th·ªã tr∆∞·ªùng VN c√≥ 2 phi√™n
                morning_open = market_config['morning_open']
                morning_close = market_config['morning_close']
                afternoon_open = market_config['afternoon_open']
                afternoon_close = market_config['afternoon_close']
                
                return ((morning_open <= current_time <= morning_close) or 
                       (afternoon_open <= current_time <= afternoon_close))
            
            elif market == 'US':
                # Th·ªã tr∆∞·ªùng US c√≥ 1 phi√™n
                market_open = market_config['open']
                market_close = market_config['close']
                
                return market_open <= current_time <= market_close
            
            return False
            
        except Exception as e:
            logger.error(f"Error checking market status for {market}: {e}")
            return False
    
    def get_active_symbols(self, market: str) -> List[Dict[str, Any]]:
        """L·∫•y danh s√°ch symbols ƒëang ho·∫°t ƒë·ªông cho th·ªã tr∆∞·ªùng"""
        try:
            # Map market to exchange
            market_to_exchange = {
                'VN': 'HOSE',
                'US': 'NASDAQ'
            }
            exchange = market_to_exchange.get(market, market)
            
            with self.SessionLocal() as s:
                query = text("""
                    SELECT id, ticker, exchange, company_name, sector
                    FROM symbols 
                    WHERE active = 1 AND exchange = :exchange
                    ORDER BY ticker
                """)
                
                result = s.execute(query, {'exchange': exchange})
                symbols = []
                
                for row in result:
                    symbols.append({
                        'id': row.id,
                        'ticker': row.ticker,
                        'exchange': row.exchange,
                        'company_name': row.company_name,
                        'sector': row.sector
                    })
                
                logger.info(f"Found {len(symbols)} active symbols for {market} market")
                return symbols
                
        except Exception as e:
            logger.error(f"Error getting active symbols for {market}: {e}")
            return []
    
    def should_send_signal(self, symbol_id: int, signal_type: str, timeframe: str) -> bool:
        """Ki·ªÉm tra c√≥ n√™n g·ª≠i t√≠n hi·ªáu kh√¥ng (tr√°nh spam)"""
        try:
            # T·∫°o key unique cho signal
            signal_key = f"{symbol_id}_{signal_type}_{timeframe}"
            current_time = datetime.now()
            
            # Ki·ªÉm tra cache
            if signal_key in self.signal_cache:
                last_sent_time = self.signal_cache[signal_key]
                time_diff = (current_time - last_sent_time).total_seconds()
                
                # Ch·ªâ g·ª≠i l·∫°i sau √≠t nh·∫•t 30 ph√∫t
                if time_diff < 1800:  # 30 minutes
                    return False
            
            # C·∫≠p nh·∫≠t cache
            self.signal_cache[signal_key] = current_time
            return True
            
        except Exception as e:
            logger.error(f"Error checking signal cache: {e}")
            return True  # G·ª≠i n·∫øu c√≥ l·ªói
    
    def format_signal_message(self, symbol_data: Dict, signal_result: Dict) -> str:
        """Format tin nh·∫Øn t√≠n hi·ªáu cho Telegram"""
        try:
            ticker = symbol_data['ticker']
            company = symbol_data.get('company_name', 'N/A')
            sector = symbol_data.get('sector', 'N/A')
            exchange = symbol_data.get('exchange', 'N/A')
            
            # Th√¥ng tin t√≠n hi·ªáu
            hybrid_signal = signal_result.get('hybrid_signal', 'UNKNOWN')
            direction = signal_result.get('hybrid_direction', 'NEUTRAL')
            strength = signal_result.get('hybrid_strength', 0.0)
            confidence = signal_result.get('confidence', 0.0)
            timeframe = signal_result.get('timeframe', 'N/A')
            
            # Th√¥ng tin chi ti·∫øt
            sma_signal = signal_result.get('sma_signal', {})
            macd_signal = signal_result.get('macd_signal', {})
            
            sma_direction = sma_signal.get('direction', 'NEUTRAL')
            macd_direction = macd_signal.get('direction', 'NEUTRAL')
            
            # L·∫•y c·∫•u h√¨nh thresholds
            thresholds_info = self._get_thresholds_info(ticker, timeframe)
            
            # T√≠nh ƒë·ªô ch√≠nh x√°c d·ª± ki·∫øn
            accuracy_info = self._calculate_expected_accuracy(confidence, hybrid_signal)
            
            # Emoji cho direction
            direction_emoji = {
                'BUY': 'üü¢',
                'SELL': 'üî¥', 
                'NEUTRAL': '‚ö™',
                'STRONG_BUY': 'üü¢üí™',
                'STRONG_SELL': 'üî¥üí™',
                'WEAK_BUY': 'üü°',
                'WEAK_SELL': 'üü†'
            }
            
            emoji = direction_emoji.get(hybrid_signal, '‚ö™')
            
            # Format tin nh·∫Øn v·ªõi c·∫•u h√¨nh v√† ƒë·ªô ch√≠nh x√°c
            message = f"""
{emoji} **T√çN HI·ªÜU GIAO D·ªäCH**

üìà **M√£ c·ªï phi·∫øu:** {ticker}
üè¢ **C√¥ng ty:** {company}
üè≠ **Ng√†nh:** {sector}
üåè **S√†n:** {exchange}
‚è∞ **Timeframe:** {timeframe}

üéØ **T√≠n hi·ªáu Hybrid:**
‚Ä¢ Lo·∫°i: {hybrid_signal.replace('_', ' ').upper()}
‚Ä¢ H∆∞·ªõng: {direction}
‚Ä¢ ƒê·ªô m·∫°nh: {strength:.2f}
‚Ä¢ ƒê·ªô tin c·∫≠y: {confidence:.2f}

üìä **Chi ti·∫øt ch·ªâ b√°o:**
‚Ä¢ SMA: {sma_direction}
‚Ä¢ MACD: {macd_direction}

‚öôÔ∏è **C·∫•u h√¨nh Thresholds:**
{thresholds_info}

üìà **ƒê·ªô ch√≠nh x√°c d·ª± ki·∫øn:**
{accuracy_info}

‚è∞ **Th·ªùi gian:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
            """.strip()
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting signal message: {e}")
            return f"T√≠n hi·ªáu cho {symbol_data.get('ticker', 'N/A')}: {signal_result.get('hybrid_signal', 'UNKNOWN')}"
    
    def _get_thresholds_info(self, ticker: str, timeframe: str) -> str:
        """L·∫•y th√¥ng tin c·∫•u h√¨nh thresholds"""
        try:
            # Load c·∫•u h√¨nh t·ª´ file YAML
            import yaml
            import os
            
            config_path = f"config/strategies/symbols/{ticker}.yaml"
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    config = yaml.safe_load(f)
                
                if 'indicators' in config and 'macd' in config['indicators']:
                    macd_config = config['indicators']['macd']
                    if 'thresholds' in macd_config and timeframe in macd_config['thresholds']:
                        thresholds = macd_config['thresholds'][timeframe]
                        return f"‚Ä¢ MACD Bull: {thresholds.get('bull', 'N/A')}\n‚Ä¢ MACD Bear: {thresholds.get('bear', 'N/A')}"
            
            # Fallback to default thresholds
            default_thresholds = {
                '1m': {'bull': 0.12, 'bear': -0.12},
                '2m': {'bull': 0.20, 'bear': -0.20},
                '5m': {'bull': 0.30, 'bear': -0.30},
                '15m': {'bull': 0.45, 'bear': -0.45},
                '30m': {'bull': 0.65, 'bear': -0.65},
                '1h': {'bull': 0.85, 'bear': -0.85},
                '4h': {'bull': 1.25, 'bear': -1.25}
            }
            
            if timeframe in default_thresholds:
                thresholds = default_thresholds[timeframe]
                return f"‚Ä¢ MACD Bull: {thresholds['bull']}\n‚Ä¢ MACD Bear: {thresholds['bear']} (Default)"
            
            return "‚Ä¢ C·∫•u h√¨nh: Default thresholds"
            
        except Exception as e:
            logger.error(f"Error getting thresholds info: {e}")
            return "‚Ä¢ C·∫•u h√¨nh: Error loading"
    
    def _calculate_expected_accuracy(self, confidence: float, signal_type: str) -> str:
        """T√≠nh ƒë·ªô ch√≠nh x√°c d·ª± ki·∫øn"""
        try:
            # Base accuracy t·ª´ confidence
            base_accuracy = confidence * 100
            
            # Bonus accuracy d·ª±a tr√™n lo·∫°i signal
            signal_bonus = {
                'STRONG_BUY': 5.0,
                'STRONG_SELL': 5.0,
                'BUY': 2.0,
                'SELL': 2.0,
                'WEAK_BUY': -3.0,
                'WEAK_SELL': -3.0,
                'NEUTRAL': 0.0
            }
            
            bonus = signal_bonus.get(signal_type, 0.0)
            expected_accuracy = min(95.0, max(50.0, base_accuracy + bonus))
            
            # ƒê√°nh gi√° m·ª©c ƒë·ªô tin c·∫≠y
            if expected_accuracy >= 80:
                reliability = "üü¢ Cao"
            elif expected_accuracy >= 70:
                reliability = "üü° Trung b√¨nh"
            else:
                reliability = "üî¥ Th·∫•p"
            
            return f"‚Ä¢ D·ª± ki·∫øn: {expected_accuracy:.1f}%\n‚Ä¢ ƒê·ªô tin c·∫≠y: {reliability}\n‚Ä¢ Lo·∫°i: {signal_type.replace('_', ' ').title()}"
            
        except Exception as e:
            logger.error(f"Error calculating expected accuracy: {e}")
            return f"‚Ä¢ D·ª± ki·∫øn: {confidence*100:.1f}%\n‚Ä¢ ƒê·ªô tin c·∫≠y: üü° Trung b√¨nh"
    
    async def process_symbol_signal(self, symbol_data: Dict[str, Any], timeframe: str = '5m') -> bool:
        """X·ª≠ l√Ω t√≠n hi·ªáu cho m·ªôt symbol c·ª• th·ªÉ"""
        try:
            symbol_id = symbol_data['id']
            ticker = symbol_data['ticker']
            
            logger.info(f"Processing signal for {ticker} ({timeframe})")
            
            # L·∫•y t√≠n hi·ªáu hybrid
            signal_result = self.hybrid_engine.evaluate_hybrid_signal(
                symbol_id=symbol_id,
                ticker=ticker,
                exchange=symbol_data['exchange'],
                timeframe=timeframe
            )
            
            # Ki·ªÉm tra c√≥ t√≠n hi·ªáu ƒë√°ng k·ªÉ kh√¥ng
            hybrid_signal = signal_result.get('hybrid_signal', 'NEUTRAL')
            confidence = signal_result.get('confidence', 0.0)
            
            # Ch·ªâ g·ª≠i t√≠n hi·ªáu c√≥ ƒë·ªô tin c·∫≠y cao
            if confidence < 0.6:
                logger.debug(f"Low confidence signal for {ticker}: {confidence:.2f}")
                return False
            
            # Ki·ªÉm tra c√≥ n√™n g·ª≠i t√≠n hi·ªáu kh√¥ng
            if not self.should_send_signal(symbol_id, hybrid_signal, timeframe):
                logger.debug(f"Signal already sent recently for {ticker}")
                return False
            
            # Format v√† g·ª≠i tin nh·∫Øn
            message = self.format_signal_message(symbol_data, signal_result)
            
            # G·ª≠i tin nh·∫Øn Telegram
            success = self.telegram_service._send_telegram_message(message)
            
            if success:
                logger.info(f"‚úÖ Signal sent for {ticker}: {hybrid_signal} (confidence: {confidence:.2f})")
                return True
            else:
                logger.error(f"‚ùå Failed to send signal for {ticker}")
                return False
                
        except Exception as e:
            logger.error(f"Error processing signal for {symbol_data.get('ticker', 'N/A')}: {e}")
            return False
    
    async def monitor_market_signals(self, market: str = 'VN', timeframes: List[str] = None):
        """Monitor t√≠n hi·ªáu cho to√†n b·ªô th·ªã tr∆∞·ªùng"""
        try:
            if timeframes is None:
                timeframes = ['5m', '15m', '30m', '1h']
            
            logger.info(f"Starting market signal monitoring for {market}")
            
            # Ki·ªÉm tra th·ªã tr∆∞·ªùng c√≥ m·ªü c·ª≠a kh√¥ng
            if not self.is_market_open(market):
                logger.info(f"Market {market} is closed, skipping monitoring")
                return
            
            # L·∫•y danh s√°ch symbols
            symbols = self.get_active_symbols(market)
            if not symbols:
                logger.warning(f"No active symbols found for {market}")
                return
            
            logger.info(f"Monitoring {len(symbols)} symbols for {market} market")
            
            # X·ª≠ l√Ω t·ª´ng symbol
            processed_count = 0
            signal_count = 0
            
            for symbol_data in symbols:
                try:
                    # X·ª≠ l√Ω cho timeframe ch√≠nh (5m)
                    success = await self.process_symbol_signal(symbol_data, '5m')
                    if success:
                        signal_count += 1
                    
                    processed_count += 1
                    
                    # Delay nh·ªè gi·ªØa c√°c symbol ƒë·ªÉ tr√°nh spam
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"Error processing symbol {symbol_data.get('ticker', 'N/A')}: {e}")
                    continue
            
            logger.info(f"Market monitoring completed: {processed_count} symbols processed, {signal_count} signals sent")
            
        except Exception as e:
            logger.error(f"Error in market signal monitoring: {e}")
    
    async def run_continuous_monitoring(self, market: str = 'VN', interval_minutes: int = 5):
        """Ch·∫°y monitoring li√™n t·ª•c"""
        logger.info(f"Starting continuous monitoring for {market} market (interval: {interval_minutes} minutes)")
        
        while True:
            try:
                # Ki·ªÉm tra th·ªã tr∆∞·ªùng c√≥ m·ªü c·ª≠a kh√¥ng
                if self.is_market_open(market):
                    await self.monitor_market_signals(market)
                else:
                    logger.debug(f"Market {market} is closed, waiting...")
                
                # Ch·ªù interval
                await asyncio.sleep(interval_minutes * 60)
                
            except KeyboardInterrupt:
                logger.info("Monitoring stopped by user")
                break
            except Exception as e:
                logger.error(f"Error in continuous monitoring: {e}")
                await asyncio.sleep(60)  # Ch·ªù 1 ph√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i

# Global instance
market_signal_monitor = MarketSignalMonitor()
